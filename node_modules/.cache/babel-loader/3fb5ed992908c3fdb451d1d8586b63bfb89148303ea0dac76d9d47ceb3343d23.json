{"ast":null,"code":"import axios from 'axios';\nimport AddTask from '../views/AddTask.vue';\nexport default {\n  name: \"CombinedView\",\n  components: {\n    AddTask\n  },\n  data() {\n    return {\n      tasks: JSON.parse(localStorage.getItem('tasks') || '[]') // Cargar tareas desde localStorage al inicio\n    };\n  },\n  mounted() {\n    this.fetchTasks();\n  },\n  watch: {\n    tasks: {\n      handler(tasks) {\n        localStorage.setItem('tasks', JSON.stringify(tasks)); // Guardar tareas en localStorage cuando cambien\n      },\n      deep: true\n    }\n  },\n  methods: {\n    async fetchTasks() {\n      try {\n        const response = await axios.get('https://dummyjson.com/todos');\n        const apiTasks = response.data.todos.map(task => ({\n          todo: task.todo,\n          completed: task.completed,\n          id: task.id\n        }));\n        this.tasks = [...apiTasks, ...this.tasks]; // Combinar tareas de la API con tareas existentes\n      } catch (error) {\n        console.error('Error fetching tasks:', error);\n      }\n    },\n    addTask(newTask) {\n      this.tasks.unshift(newTask); // Añade la nueva tarea al inicio de la lista\n    },\n    toggleTaskCompletion(task) {\n      task.completed = !task.completed;\n    },\n    deleteTask(task) {\n      this.tasks = this.tasks.filter(t => t.id !== task.id);\n    }\n  }\n};","map":{"version":3,"names":["axios","AddTask","name","components","data","tasks","JSON","parse","localStorage","getItem","mounted","fetchTasks","watch","handler","setItem","stringify","deep","methods","response","get","apiTasks","todos","map","task","todo","completed","id","error","console","addTask","newTask","unshift","toggleTaskCompletion","deleteTask","filter","t"],"sources":["src/views/CombinedView.vue"],"sourcesContent":["<template>\r\n    <div class=\"combined-view-container\">\r\n        <h1>Lista de Tareas</h1>\r\n        <AddTask :tasks=\"tasks\" @add-task=\"addTask\" @toggle-completion=\"toggleTaskCompletion\" @delete-task=\"deleteTask\" />\r\n        <ul v-if=\"tasks.length\" class=\"list-group mt-3\">\r\n            <li v-for=\"task in tasks\" :key=\"task.id\" class=\"task-item\">\r\n                <span :class=\"{ completed: task.completed }\">{{ task.todo }}</span>\r\n                <div class=\"actions\">\r\n                    <button @click=\"toggleTaskCompletion(task)\" class=\"btn btn-success btn-sm\">\r\n                        {{ task.completed ? 'Desmarcar' : 'Completar' }}\r\n                    </button>\r\n                    <button @click=\"deleteTask(task)\" class=\"btn btn-danger btn-sm\">Eliminar</button>\r\n                </div>\r\n            </li>\r\n        </ul>\r\n        <p v-else>No hay tareas disponibles.</p>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport AddTask from '../views/AddTask.vue';\r\n\r\nexport default {\r\n    name: \"CombinedView\",\r\n    components: {\r\n        AddTask\r\n    },\r\n    data() {\r\n        return {\r\n            tasks: JSON.parse(localStorage.getItem('tasks') || '[]') // Cargar tareas desde localStorage al inicio\r\n        };\r\n    },\r\n    mounted() {\r\n        this.fetchTasks();\r\n    },\r\n    watch: {\r\n        tasks: {\r\n            handler(tasks) {\r\n                localStorage.setItem('tasks', JSON.stringify(tasks)); // Guardar tareas en localStorage cuando cambien\r\n            },\r\n            deep: true\r\n        }\r\n    },\r\n    methods: {\r\n        async fetchTasks() {\r\n            try {\r\n                const response = await axios.get('https://dummyjson.com/todos');\r\n                const apiTasks = response.data.todos.map(task => ({\r\n                    todo: task.todo,\r\n                    completed: task.completed,\r\n                    id: task.id\r\n                }));\r\n                this.tasks = [...apiTasks, ...this.tasks]; // Combinar tareas de la API con tareas existentes\r\n            } catch (error) {\r\n                console.error('Error fetching tasks:', error);\r\n            }\r\n        },\r\n        addTask(newTask) {\r\n            this.tasks.unshift(newTask); // Añade la nueva tarea al inicio de la lista\r\n        },\r\n        toggleTaskCompletion(task) {\r\n            task.completed = !task.completed;\r\n        },\r\n        deleteTask(task) {\r\n            this.tasks = this.tasks.filter(t => t.id !== task.id);\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.combined-view-container {\r\n    padding: 20px;\r\n    max-width: 400px;\r\n    margin: 0 auto;\r\n}\r\n\r\n.list-group {\r\n    margin-top: 20px;\r\n}\r\n\r\n.task-item {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #eee;\r\n}\r\n\r\n.actions button {\r\n    margin-left: 10px;\r\n}\r\n\r\n.completed {\r\n    text-decoration: line-through;\r\n    color: gray;\r\n}\r\n</style>\r\n"],"mappings":"AAoBA,OAAAA,KAAA;AACA,OAAAC,OAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAF;EACA;EACAG,KAAA;IACA;MACAC,KAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,UAAA;EACA;EACAC,KAAA;IACAP,KAAA;MACAQ,QAAAR,KAAA;QACAG,YAAA,CAAAM,OAAA,UAAAR,IAAA,CAAAS,SAAA,CAAAV,KAAA;MACA;MACAW,IAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAN,WAAA;MACA;QACA,MAAAO,QAAA,SAAAlB,KAAA,CAAAmB,GAAA;QACA,MAAAC,QAAA,GAAAF,QAAA,CAAAd,IAAA,CAAAiB,KAAA,CAAAC,GAAA,CAAAC,IAAA;UACAC,IAAA,EAAAD,IAAA,CAAAC,IAAA;UACAC,SAAA,EAAAF,IAAA,CAAAE,SAAA;UACAC,EAAA,EAAAH,IAAA,CAAAG;QACA;QACA,KAAArB,KAAA,OAAAe,QAAA,UAAAf,KAAA;MACA,SAAAsB,KAAA;QACAC,OAAA,CAAAD,KAAA,0BAAAA,KAAA;MACA;IACA;IACAE,QAAAC,OAAA;MACA,KAAAzB,KAAA,CAAA0B,OAAA,CAAAD,OAAA;IACA;IACAE,qBAAAT,IAAA;MACAA,IAAA,CAAAE,SAAA,IAAAF,IAAA,CAAAE,SAAA;IACA;IACAQ,WAAAV,IAAA;MACA,KAAAlB,KAAA,QAAAA,KAAA,CAAA6B,MAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAT,EAAA,KAAAH,IAAA,CAAAG,EAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}